<?php
/*
 * Project: ChatGPT API
 * Author: Vontainment
 * URL: https://vontainment.com
 * File: feeds.php
 * Description: ChatGPT API Status Generator
 */

require_once '../config.php';
require_once '../app/status-helper.php';
require_once "../app/admin-helper.php";

// Check if the required query parameters are present in the URL
if (!isset($_GET['acct']) || !isset($_GET['key'])) {
    // If the parameters are missing, show an error message and exit the script
    echo 'Error: Missing required parameters';
    exit();
}

if (isset($_GET['acct']) && isset($_GET['key'])) {
    $account = $_GET['acct'];
    $key = $_GET['key'];

    $accountFile = "../storage/accounts/{$account}";

    if (file_exists($accountFile)) {
        $accountInfo = unserialize(file_get_contents($accountFile));

        // Pass the $key variable when calling the function.
        if ($accountInfo['key'] === $key) {
            outputRssFeed($account, $key, $accountInfo);
        } else {
            echo 'Invalid key.';
        }
    } else {
        echo 'Invalid account.';
        exit();
    }
} else {
    echo 'Missing account or key.';
    exit();
}

function outputRssFeed($account, $key, $accountInfo)
{
    $statusFile = "../storage/statuses/{$account}";

    $statuses = [];
    if (file_exists($statusFile)) {
        $statuses = unserialize(file_get_contents($statusFile));
    }

    $imageFolder = "images/{$account}/";
    $images = glob($imageFolder . "*.{jpg,jpeg,png}", GLOB_BRACE);
    $imageCount = count($images);

    $imageAssignFile = $imageFolder . "img";
    if (!file_exists($imageAssignFile)) {
        file_put_contents($imageAssignFile, "");
    }
    $imageAssignments = file($imageAssignFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

    $rssImageTag = "";
    $imageIndex = -1;
    if (!empty($imageAssignments)) {
        foreach ($statuses as $index => $status) {
            if (!empty($status)) {
                $statusTitle = 'Status ' . ($index + 1);
                if (strpos($status, '#') !== false) {
                    $statusTitle = substr($status, 0, strpos($status, '#'));
                }
                $statusTitle = preg_replace('/[^a-zA-Z0-9]/', '_', $statusTitle);
                $imageName = (isset($imageAssignments[$index]) && $imageAssignments[$index] !== '_NOIMAGE_') ? $imageAssignments[$index] : null;
                if (!empty($imageName)) {
                    if ($imageName !== '_NOIMAGE_') {
                        $imageUrl = DOMAIN . '/' . $imageName;
                        $imageIndex = array_search($imageUrl, $images);
                        if ($imageIndex !== false) {
                            $imageExt = pathinfo($images[$imageIndex], PATHINFO_EXTENSION);
                            $mimeTypes = [
                                'jpg' => 'image/jpeg',
                                'jpeg' => 'image/jpeg',
                                'png' => 'image/png',
                            ];
                            $mime = $mimeTypes[$imageExt] ?? 'image/jpeg';
                            $rssImageTag = '<enclosure url="' . htmlspecialchars($imageUrl) . '" type="' . $mime . '" />' . PHP_EOL;
                            break;
                        }
                    }
                }
            }
        }
    }

    header('Content-Type: application/rss+xml; charset=utf-8');
    echo '<?xml version="1.0" encoding="UTF-8"?>' . PHP_EOL;
    echo '<rss version="2.0">' . PHP_EOL;
    echo '<channel>' . PHP_EOL;

    echo '<title>Facebook Statuses - ' . htmlspecialchars($account) . '</title>' . PHP_EOL;
    echo '<link>' . htmlspecialchars($accountInfo['link']) . '</link>' . PHP_EOL;
    echo '<description>Facebook status updates generated by GPT API for ' . htmlspecialchars($account) . '</description>' . PHP_EOL;
    echo '<language>en-us</language>' . PHP_EOL;

foreach ($statuses as $index => $status) {
    if (!empty($status)) {
        $rssImageTag = '';
        $imgFile = "images/{$account}/img";
        if (file_exists($imgFile)) {
            $imageAssignFile = $imageFolder . "img";
            if (!file_exists($imageAssignFile)) {
                file_put_contents($imageAssignFile, "");
            }
            $imageAssignments = file($imageAssignFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            if (!empty($imageAssignments[$index]) && $imageAssignments[$index] !== '_NOIMAGE_') {
                $imageName = trim($imageAssignments[$index]);
                if (!empty($imageName)) {
                    $imageUrl = DOMAIN . '/' . $imageName;
                    $imageExtension = pathinfo($imageName, PATHINFO_EXTENSION);
                    $contentType = "image/{$imageExtension}";
                    $rssImageTag = '<enclosure url="' . htmlspecialchars($imageUrl) . '" type="' . $contentType . '" />' . PHP_EOL;
                }
            }
        }
        echo '<item>' . PHP_EOL;
        echo '<title>Status ' . ($index + 1) . '</title>' . PHP_EOL;
        echo '<link>' . htmlspecialchars($accountInfo['link']) . '</link>' . PHP_EOL;
        echo '<description><![CDATA[' . htmlspecialchars(trim($status)) . ']]></description>' . PHP_EOL;
        echo '<pubDate>' . date('r', time() - (count($statuses) - $index) * 3600) . '</pubDate>' . PHP_EOL;
        echo $rssImageTag;
        echo '</item>' . PHP_EOL;
    }
}
echo '</channel>' . PHP_EOL;
echo '</rss>';
}